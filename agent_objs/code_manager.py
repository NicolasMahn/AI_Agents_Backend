_message_callback = None

def register_message_callback(callback_func):
    """Registers a function to be called when a message needs to be sent."""
    global _message_callback
    _message_callback = callback_func

def _notify(message):
    """Internal helper to safely call the registered callback."""
    if _message_callback:
        try:
            _message_callback(message, "code_update")
        except Exception as e:
            print(f"Error in message callback: {e}")
    else:
        print(f"Message notification attempted, but no callback registered: {message}")


class CodeManager(list):

    def __init__(self, agent_system_name :str):
        self.agent_system_name :str = agent_system_name
        super().__init__()

    def append(self, __object):
        super().append(__object)
        _notify(f"New Code generated by `{self.agent_system_name}`")

